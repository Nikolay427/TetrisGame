The game code responsible for controlling the game "Tetromino.cs":
using UnityEngine;
public class Tetromino : MonoBehaviour
{
float fall = 0;
private float fallSpeed;
public bool allowRotation = true;
public bool limitRotation = false;
public AudioClip moveSound;
public AudioClip rotateSound;
public AudioClip landSound;
private AudioSource audioSource;
private float continuousVerticalSpeed = 0.05f;
private float continuousHorisontalSpeed = 0.1f;
private float buttonDownWaitMax = 0.15f;
private float verticalTimer = 0;
private float horisontalTimer = 0;
private float buttonDownWaitTimerHorisontal = 0;
private float buttonDownWaitTimerVertical = 0;
private bool movedImmediateHorisontal = false;
private bool movedImmediateVertical = false;
//Переменные для управления на экране
private int touchSensitiveHorisontal = 8;
private int touchSensitiveVertical = 4;
Vector2 previousUnitPosition = Vector2.zero;
Vector2 direction = Vector2.zero;
bool moved = false;
void Start ()
{audioSource = GetComponent<AudioSource>();}
void Update ()
{
if (!Game.isPaused)
{
CheckUserInput();
UpdateFallSpeed();
}
} 
private void UpdateFallSpeed()
{
fallSpeed = Game.fallSpeed;
}
private void CheckUserInput()
{
#if UNITY_ANDROID
if(Input.touchCount > 0)
{
Touch t = Input.GetTouch(0);
if(t.phase == TouchPhase.Began)
{
previousUnitPosition = new Vector2(t.position.x, t.position.y);
}else if(t.phase == TouchPhase.Moved)
{
Vector2 touchDeltaPosition = t.deltaPosition;
direction = touchDeltaPosition.normalized;
if(Mathf.Abs(t.position.x - previousUnitPosition.x) >= touchSensitiveHorisontal && direction.x < 0 && t.deltaPosition.y > -10 && t.deltaPosition.y < 10)
{
//движение влево
MoveLeft();
previousUnitPosition = t.position;
moved = true;
}else if(Mathf.Abs(t.position.x - previousUnitPosition.x) >= touchSensitiveHorisontal && direction.x > 0 && t.deltaPosition.y > -10 && t.deltaPosition.y < 10)
{
//движение вправо
MoveRight();
previousUnitPosition = t.position;
moved = true;
}else if (Mathf.Abs(t.position.y - previousUnitPosition.y) >= touchSensitiveVertical && direction.y < 0 &&  t.deltaPosition.x > -10 && t.deltaPosition.x < 10)
{
//Движение вниз
MoveDown();
previousUnitPosition = t.position;
moved = true;
}
}else if(t.phase == TouchPhase.Ended)
{
if(!moved && t.position.x > Screen.width / 4)
{
Rotate();
}
moved = false;
}
}
if (Time.time - fall >= fallSpeed)
{
MoveDown();
 }
#else
if(Input.GetKeyUp(KeyCode.RightArrow) || Input.GetKeyUp(KeyCode.LeftArrow))
{
movedImmediateHorisontal = false;
horisontalTimer = 0;
buttonDownWaitTimerHorisontal = 0;
}
if (Input.GetKeyUp(KeyCode.DownArrow))
{
movedImmediateVertical = false;
verticalTimer = 0;
buttonDownWaitTimerVertical = 0;
}
//Движение влево
if (Input.GetKey(KeyCode.LeftArrow))
{
MoveLeft();
}
//движение вправо
if (Input.GetKey(KeyCode.RightArrow))
{
MoveRight();
}
//поворот фигуры вокруг своей оси
if (Input.GetKeyDown(KeyCode.UpArrow))
{
Rotate();
}
//падение(быстрое движение вниз)
if (Input.GetKey(KeyCode.DownArrow) || Time.time - fall >= fallSpeed)
{
MoveDown();
}
if (Input.GetKeyDown(KeyCode.DownArrow))
{
PlayMoveAudio();
}
#endif
}
private void MoveLeft()
{
if (movedImmediateHorisontal)
{
if (buttonDownWaitTimerHorisontal < buttonDownWaitMax)
{
buttonDownWaitTimerHorisontal += Time.deltaTime;
return;
}
if (horisontalTimer < continuousHorisontalSpeed)
{
horisontalTimer += Time.deltaTime;
 return;
}
}
if (!movedImmediateHorisontal)
movedImmediateHorisontal = true;
horisontalTimer = 0;
transform.position += new Vector3(-1, 0, 0);
if (CheckIsValidPosition())
{
FindObjectOfType<Game>().UpdateGrid(this);
PlayMoveAudio();
}
else
{
transform.position += new Vector3(1, 0, 0);
}
}
private void MoveRight()
{
if (movedImmediateHorisontal)
{
if (buttonDownWaitTimerHorisontal < buttonDownWaitMax)
{
buttonDownWaitTimerHorisontal += Time.deltaTime;
return;
}
if (horisontalTimer < continuousHorisontalSpeed)
{
horisontalTimer += Time.deltaTime;
return;
}
}
if (!movedImmediateHorisontal)
movedImmediateHorisontal = true;
horisontalTimer = 0;
transform.position += new Vector3(1, 0, 0);
if (CheckIsValidPosition())
{
FindObjectOfType<Game>().UpdateGrid(this);//Проверка позиции
PlayMoveAudio();
}else
{
transform.position += new Vector3(-1, 0, 0);
}
}
private void MoveDown()
{
if (movedImmediateVertical)
{
if(buttonDownWaitTimerVertical < buttonDownWaitMax)
{
buttonDownWaitTimerVertical += Time.deltaTime;
return;
}
}
if(verticalTimer < continuousVerticalSpeed)
{
verticalTimer += Time.deltaTime;
return;
}
if (!movedImmediateVertical)
movedImmediateVertical = true;
verticalTimer = 0;
transform.position += new Vector3(0, -1, 0);
if (CheckIsValidPosition())
{
FindObjectOfType<Game>().UpdateGrid(this);//Проверка позиции
}else
{
transform.position += new Vector3(0, 1, 0);
FindObjectOfType<Game>().DeleteRow(); //Удаление строки
if (FindObjectOfType<Game>().CheckIsAboveGrid(this))
{
FindObjectOfType<Game>().GameOver();
}
PlayLandAudio();
FindObjectOfType<Game>().SpawnNextTetromino();
enabled = false;//Останавливает фигуру(нельзя двигать)
}
fall = Time.time;
}
private void Rotate()
{
if (limitRotation)
{
if (allowRotation)
{
if (transform.rotation.eulerAngles.z >= 90)
{
transform.Rotate(0, 0, -90);
}
else
{
transform.Rotate(0, 0, 90);
}
}
}
else
{
transform.Rotate(0, 0, 90);
}
if (CheckIsValidPosition())
{
FindObjectOfType<Game>().UpdateGrid(this);//Проверка позиции
PlayRotateAudio();
}else{
if (allowRotation)
{
if (transform.rotation.eulerAngles.z >= 90)
{
transform.Rotate(0, 0, -90);
}
else
{
transform.Rotate(0, 0, 90);
}
}
else
{
transform.Rotate(0, 0, -90);
}
}
}
private void PlayMoveAudio()
{
audioSource.PlayOneShot(moveSound);
}
private void PlayRotateAudio()
{
audioSource.PlayOneShot(rotateSound);
}
private void PlayLandAudio()
{
audioSource.PlayOneShot(landSound);
}
bool CheckIsValidPosition ()
{
foreach(Transform mino in transform)
{
Vector2 pos = FindObjectOfType<Game>().Round(mino.position);
if(FindObjectOfType<Game>().CheckIsInsideGrid (pos) == false)
{
return false;
}
if(FindObjectOfType<Game>().GetTransformAtGridPosition(pos) != null && FindObjectOfType<Game>().GetTransformAtGridPosition(pos).parent != transform)
{return false;}
}
return true;
}
}
